# Py_ALU_classes4.txt
# exec(open('Py_ALU_classes4.txt').read())

# Purpose:
#	to practice creating classes in python
#	there should be many version of this file from 0 to high 
#	witn increasing complexity and demonstration of increasing understanding on 
#	the concept of classes and python 
#
# ====================================================================================

class ALU:
	def __init__(self,x,y ):
		
		self.x_value      = x 
		self.y_value      = y 

	def add_print(self):
		print('add_print self.x_value + self.y_value: \n', 
		self.x_value + self.y_value)
	def sub_print(self):
		print('sub_print self.x_value - self.y_value: \n', 
		self.x_value - self.y_value)
	def mul_print(self):
		print('mul_print self.x_value * self.y_value: \n', 
		self.x_value * self.y_value)
	def div_print(self):
		print('div_print self.x_value / self.y_value: \n', 
		self.x_value / self.y_value)
op = ALU(3,2)

op.add_print() 
op.sub_print() 
op.mul_print() 
op.div_print() 

# We will use inheritance to add functionality to this class:

class Child_ALU(ALU):
	
	def __init__(self,x, y, z):
		super().__init__(x,y)

		self.z_value = z

	def res_add_print(self):
		print('res_add_print self.x_value + self.y_value + self.z_value: \n',
		self.x_value + self.y_value + self.z_value )
		 
	def res_sub_print(self):
		print('res_sub_print self.x_value - self.y_value - self.z_value: \n',
		self.x_value - self.y_value - self.z_value )

	def res_mul_print(self):
		print('res_mul_print self.x_value * self.y_value * self.z_value: \n',
		self.x_value * self.y_value * self.z_value )

	def res_div_print(self):
		print('res_div_print self.x_value / self.y_value / self.z_value: \n',
		self.x_value / self.y_value / self.z_value )

op_child = Child_ALU(3,2,1)

# we can call a parent method 
# from the child class
op_child.add_print()

op_child.res_add_print() 
op_child.res_sub_print() 
op_child.res_mul_print() 
op_child.res_div_print() 
